
#include <LiquidCrystal.h>

//                             Pines Wemos
#define entradaRoja     16  // 14
#define entradaVerde    4   // 12
#define entradaAzul     2   // 13
#define entradaAmarilla 15  // 15

#define ledRojo         27  // 5
#define ledVerde        14  // 4
#define ledAzul         12  // 0
#define ledAmarillo     13  // 2

#define potenciometro   34  // 36 es el posta

#define buzzer          23  // 16

#define brilloLCD       22

enum Color{
  BLANCO,
  ROJO,
  VERDE,
  AZUL,
  AMARILLO
};

enum Tipo{
  ESTANDAR,
  TRAMPA,
  APRETON,
  DOBLE
};

enum Modo{
  NORMAL,
  QUANTUM,
  FAST,
  TRAP,
  DOUBLE,
  GRIP,
  HARCORE,
  REVERSE
};

struct Paso{
  Tipo tipoPaso;
  Color colorLed;
};

const int cantidadMaxJugadores = 10;
int letraActual = 0;
char jugadorActual[7] = {' ', ' ', ' ', ' ', ' ', ' ', '\0'};
bool registrando = false; 

struct Jugador{
  char nombre[7] = {' ', ' ', ' ', ' ', ' ', ' ', '\0'};
  int puntaje = 0;
};

struct Clasificacion{
  Jugador lista[10];  // Máximo de 10 jugadores
  int cantidadJugadores = 0;  // Cantidad de jugadores actuales en la lista
};

Clasificacion rankingNormal   = {{}, 0};
Clasificacion rankingQuantum  = {{}, 0};
Clasificacion rankingFast     = {{}, 0};
Clasificacion rankingTrap     = {{}, 0};
Clasificacion rankingDouble   = {{}, 0};
Clasificacion rankingGrip     = {{}, 0};
Clasificacion rankingHarcore  = {{}, 0};
Clasificacion rankingReverse  = {{}, 0};

Paso secuencia[100][4] = {{}};

Modo modoActual = NORMAL;
int nivelActual = 0; //tiene que inicializar en 0
int puntajeActual = 0;
int vidas = 3;
int racha = 0;

int demoraMaxima = 1000;
int demoraMinima = 250;
int nivelRapido = 10; //nivel donde se alcanza la demora mínima
int velocidadActual = 0;

int valorADC = 0;               // Valor del potenciómetro
int opcionSeleccionada = 0;     // Opción seleccionada
int modoSeleccionado = -1;      // Modo seleccionado (-1 = ninguno)

const char* modosDisponibles[] = {
  "Normal",
  "Cuantico",
  "Rapido",
  "Trampa",
  "Doble",
  "Apreton",
  "Harcore",
  "Reversa"
};

const int cantidadModos = sizeof(modosDisponibles) / sizeof(modosDisponibles[0]); // Número de opciones

LiquidCrystal lcd(18, 5, 26, 25, 33, 32); //(5, 18, 26, 25, 33, 32); La posta

byte corazon[8] = {
  0b00000,
  0b01010,
  0b11111,
  0b11111,
  0b11111,
  0b01110,
  0b00100,
  0b00000
};

int charCorazon = 0;

byte corazonRoto[8] = {
  0b00000,
  0b01010,
  0b11101,
  0b11011,
  0b10111,
  0b01110,
  0b00100,
  0b00000
};

int charCorazonRoto = 1;

byte calavera[8] = {
  0b00000,
  0b01110,
  0b10101,
  0b10101,
  0b11111,
  0b01110,
  0b01110,
  0b00000
};

int charCalavera = 2;

void setup() {
  Serial.begin(115200);
  Serial.println("FUNCA (⌐■_■)");

  lcd.begin(16,2);
  lcd.createChar(charCorazon,     corazon);
  lcd.createChar(charCorazonRoto, corazonRoto);
  lcd.createChar(charCalavera,    calavera);

  analogWrite(brilloLCD, 5); //Se manda una señal PWM para control del brillo de contraste en el LCD

  pinMode(entradaAmarilla, INPUT_PULLUP);
  pinMode(entradaRoja, INPUT_PULLUP);
  pinMode(entradaVerde, INPUT_PULLUP);
  pinMode(entradaAzul, INPUT_PULLUP);

  pinMode(ledAmarillo, OUTPUT);
  pinMode(ledRojo, OUTPUT);
  pinMode(ledVerde, OUTPUT);
  pinMode(ledAzul, OUTPUT);

  pinMode(buzzer, OUTPUT);
}
    
void loop() {
  /*if(digitalRead(entradaRoja) == LOW){
    digitalWrite(ledRojo, HIGH);

    tone(buzzer, 220, 25);
    noTone(buzzer);

    digitalWrite(ledRojo, LOW);
  }

  if(digitalRead(entradaVerde) == LOW){
    digitalWrite(ledVerde, HIGH);

    tone(buzzer, 330, 25);
    noTone(buzzer);

    digitalWrite(ledVerde, LOW);
  }

  if(digitalRead(entradaAzul) == LOW){
    digitalWrite(ledAzul, HIGH);

    tone(buzzer, 440, 25);
    noTone(buzzer);

    digitalWrite(ledAzul, LOW);
  }

  if(digitalRead(entradaAmarilla) == LOW){
    digitalWrite(ledAmarillo, HIGH);

    tone(buzzer, 550, 25);
    noTone(buzzer);

    digitalWrite(ledAmarillo, LOW);
  }*/

  //========================================================================================
                                                                                        // "\0"
    /**/

  //========================================================================================

  //delay(1500);//delay que tengo que poner para que el primer paso no se buguee ¯\_(ツ)_/¯

  //iniciarModoNormal();
  //iniciarModoQuantum();
  //iniciarModoRapido();
  //iniciarModoTrampa();
  //iniciarModoDoble();
  //iniciarModoApreton();
  //iniciarModoHarcore();
  //iniciarModoAlReves(); 

  //delay(2000);/**/
//int valorADC = 0;               // potValue 
//int opcionSeleccionada = 0;     // menuOption
//int modoSeleccionado = -1;      // selectedMode 
//
//const char* modosDisponibles[] = { //gameModes
//  "Normal",
//  "Cuantico",
//  "Rapido",
//  "Trampa",
//  "Doble",
//  "Apreton",
//  "Harcore",
//  "Reversa"
//};
//
//const int cantidadModos = sizeof(modosDisponibles) / sizeof(modosDisponibles[0]); // numModes 

//digitalRead(entradaAzul) == LOW
  //========================================================================================
  digitalWrite(ledAzul, HIGH);

  if (modoSeleccionado == -1) { // Si no hay un modo seleccionado
    // Leer el potenciómetro
    valorADC = analogRead(potenciometro);

    // Calcular la opción según el rango del potenciómetro
    int rango = 4095 / cantidadModos; // Rango para cada modo - Config ADC 3.3V (1024) 5V (4095)
    //Serial.println(String(rango) + " = 1023 / " + String(cantidadModos) );
    opcionSeleccionada = valorADC / rango;
    //Serial.println(String(opcionSeleccionada) +" = "+String(valorADC)+" / "+String(rango) );

    // Asegurarse de que menuOption esté dentro de los límites
    if (opcionSeleccionada >= cantidadModos) {
      opcionSeleccionada = cantidadModos - 1;
    }

    // Mostrar el menú
    lcd.setCursor(0, 0);
    lcd.print("Modo:           "); // Borra línea superior
    lcd.setCursor(0, 0);
    lcd.print("Modo: ");
    lcd.print(modosDisponibles[opcionSeleccionada]); // Mostrar opción actual

    lcd.setCursor(0, 1);
    lcd.print("Seleccione >"); // Indica que uses el botón

    // Leer el estado del botón
    if (digitalRead(entradaAzul) == LOW) {
      // Botón presionado
      digitalWrite(ledAzul, LOW);

      modoSeleccionado = opcionSeleccionada;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Seleccionado:");
      lcd.setCursor(0, 1);
      lcd.print(modosDisponibles[modoSeleccionado]); // Mostrar selección
      delay(2000);
      lcd.clear();

      vidas = 1; // parche para poder entrar al blucle while <3

      while(vidas != 0){
        ejecutarModo(modoSeleccionado);
      }

      digitalWrite(ledAzul, HIGH);
      modoSeleccionado = -1;
    }
  }

  delay(100); // Pequeño retraso para estabilidad
}

void ingresarNombre(){
  while (!registrando) {
    // Mostrar el nombre y hacer parpadear el primer carácter
    mostrarNombre();

    // Leer el valor del potenciómetro
    valorADC = analogRead(potenciometro);

    // Calcular la opción según el rango del potenciómetro
    int rango = 4095 / 26; // Rango para cada modo - Config ADC 3.3V (1024) 5V (4095)
    Serial.println(String(rango) + " = 4095 / 26" );
    int letraIndex = valorADC / rango;
    Serial.println(String(letraIndex) +" = "+String(valorADC)+" / "+String(rango) );

    // Asegurarse de que menuOption esté dentro de los límites
    if (letraIndex >= 27) {
      letraIndex = 27 - 1;
    }

    // Cambiar la letra seleccionada con el potenciómetro
    if(letraIndex != 26){
      jugadorActual[letraActual] = 'A' + letraIndex;
    }else{
      jugadorActual[letraActual] = ' ';
    }

    // Botones para moverse entre las letras
    if (digitalRead(entradaRoja) == LOW) {
      // Moverse a la letra anterior
      letraActual = max(0, letraActual - 1);  // No permitir moverse fuera de rango
      delay(200); // Antirrebote
    }
    if (digitalRead(entradaAmarilla) == LOW) {
      // Moverse a la siguiente letra
      letraActual = min(5, letraActual + 1);  // No permitir moverse fuera de rango
      delay(200); // Antirrebote
    }

    // Si se presiona el botón de selección, finaliza el registro y retorna el nombre y puntaje
    if (digitalRead(entradaAzul) == LOW) {
      registrando = true;  // Marcar que estamos en el proceso de seleccionar
      mostrarNombre();  // Mostrar el nombre final
      delay(1000);  // Mostrar durante un segundo
      // Aquí retornamos el nombre y el puntaje
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Nombre: ");
      lcd.print(jugadorActual);
      lcd.print("  ");
      lcd.setCursor(0, 1);
      lcd.print("Puntaje: ");
      lcd.print(puntajeActual);
      delay(2000);  // Mostrar el nombre y puntaje durante 2 segundos
      // Aquí podrías retornar o hacer algo más, como almacenar los datos.
      
      registrarNombre();

      // Mostrar un mensaje final o continuar con el flujo del juego.
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("REGISTRADO");
      lcd.setCursor(0, 1);
      lcd.print("Esperando...");
      delay(2000); // Mantener en espera
    }
    delay(50);
  }
  registrando = false;
}

void mostrarNombre() {
  lcd.clear();
  // Mostrar el nombre con el cursor parpadeando en la posición correspondiente
  lcd.home();
  lcd.print("   <        >   ");
  for (int i = 0; i < 6; i++) {
    lcd.setCursor(i+5, 0);
    lcd.print(jugadorActual[i]);
    if (i == letraActual) {
      lcd.setCursor(i+5, 1);
      lcd.print("^");
    }
  }
}

void registrarNombre(){
  switch(modoActual){
    case NORMAL:
      registrarJugador(rankingNormal);
      debugClasificacion(rankingNormal);
      break;
    case QUANTUM:
      registrarJugador(rankingQuantum);
      debugClasificacion(rankingQuantum);
      break;
    case FAST:
      registrarJugador(rankingFast);
      debugClasificacion(rankingFast);
      break;
    case TRAP:
      registrarJugador(rankingTrap);
      debugClasificacion(rankingTrap);
      break;
    case DOUBLE:
      registrarJugador(rankingDouble);
      debugClasificacion(rankingDouble);
      break;
    case GRIP:
      registrarJugador(rankingGrip);
      debugClasificacion(rankingGrip);
      break;
    case HARCORE:
      registrarJugador(rankingHarcore);
      debugClasificacion(rankingHarcore);
      break;
    case REVERSE:
      registrarJugador(rankingReverse);
      debugClasificacion(rankingReverse);
      break;
  }
}

void registrarJugador(Clasificacion &ranking) {
  // Verificar si el jugador ya existe en la lista
  for (int i = 0; i < ranking.cantidadJugadores; i++) {
    if (strcmp(ranking.lista[i].nombre, jugadorActual) == 0) {
      if (ranking.lista[i].puntaje > puntajeActual){
        // Si el jugador existe y rompio record, actualizar su puntaje
        ranking.lista[i].puntaje = puntajeActual;
        return;  // Salir de la función, ya que el puntaje ha sido actualizado
      }
    }
  }

  // Si el jugador no existe, agregarlo a la lista
  if (ranking.cantidadJugadores < 10) {
    Jugador nuevoJugador;
    strcpy(nuevoJugador.nombre, jugadorActual);
    nuevoJugador.puntaje = puntajeActual;
    
    // Insertar el nuevo jugador en la lista ordenada por puntaje
    int i = ranking.cantidadJugadores;
    while (i > 0 && ranking.lista[i - 1].puntaje < nuevoJugador.puntaje) {
      ranking.lista[i] = ranking.lista[i - 1];  // Desplazar jugadores
      i--;
    }
    ranking.lista[i] = nuevoJugador;
    ranking.cantidadJugadores++;  // Aumentar la cantidad de jugadores
  }
}

void ejecutarModo(int modoActual){
  switch (modoActual) {
    case 0:  // Modo Hardcore
      iniciarModoNormal();
      break;
    case 1:  // Modo Normal
      iniciarModoQuantum();
      break;
    case 2:  // Modo Trampa
      iniciarModoRapido();
      break;
    case 3:  // Modo Veloz
      iniciarModoTrampa();
      break;
    case 4:  // Modo Ranked
      iniciarModoDoble();
      break;
    case 5:  // Modo Ranked
      iniciarModoApreton();
      break;
    case 6:  // Modo Ranked
      iniciarModoHarcore();
      break;
    case 7:  // Modo Ranked
      iniciarModoAlReves();
      break;
    default:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Modo no encontrado");
      delay(1000);
      lcd.clear();
      break;
  }
}

void iniciarModoNormal(){
  modoActual = NORMAL;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 3;
  }
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  jugarSecuencia(secuencia);
  
  actualizarPuntos();
  //actualizarPantalla();
}

void iniciarModoQuantum(){
  modoActual = QUANTUM;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 3;
  }
  
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  jugarSecuencia(secuencia);
  
  actualizarPuntos();
  //actualizarPantalla();
}

void iniciarModoRapido(){
  modoActual = FAST;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 3;
  }
  nivelRapido = 2;
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  jugarSecuencia(secuencia);
  
  actualizarPuntos();
  //actualizarPantalla();
}

void iniciarModoTrampa(){
  modoActual = TRAP;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 3;
  }
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  jugarSecuencia(secuencia);
  
  actualizarPuntos();
  //actualizarPantalla();
}

void iniciarModoDoble(){
  modoActual = DOUBLE;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 3;
  }
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  jugarSecuencia(secuencia);
  
  actualizarPuntos();
  //actualizarPantalla();
}

void iniciarModoApreton(){
  modoActual = GRIP;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 3;
  }
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  jugarSecuencia(secuencia);
  
  actualizarPuntos();
  //actualizarPantalla();
}

void iniciarModoHarcore(){
  modoActual = HARCORE;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 1;
  }
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  jugarSecuencia(secuencia);
  
  actualizarPuntos();
  //actualizarPantalla();
}


  
void iniciarModoAlReves(){
  modoActual = REVERSE;
  nivelActual++;
  if(nivelActual == 1){
    vidas = 3;
  }
  actualizarPantalla();

  sumarPasoAleatorio(secuencia);
  realizarSecuencia(secuencia);

  debugNivelVelocidadSecuencia();

  Paso secuenciaInvertida[100][4] = {{}};
  for(int i = nivelActual, indice = 1; i > 0; i--, indice++){
    secuenciaInvertida[indice][0] = secuencia[i][0];
  }

  jugarSecuencia(secuenciaInvertida);
  
  actualizarPuntos();
  //actualizarPantalla();
}

void actualizarPuntos(){
  puntajeActual = nivelActual * 100 + vidas * 20 + racha * 50;
}

void actualizarPantalla(){
  motrarNivelPuntos();
  mostrarVidas();
}

void motrarNivelPuntos(){
  lcd.home();
  lcd.print("Nvl: ");
  lcd.print(nivelActual);
  lcd.print("  "); //limpear en caso de haber basura

  lcd.setCursor(0,1);
  lcd.print("Score: ");
  lcd.print(puntajeActual);
  lcd.print("        "); //limpear en caso de haber basura
}

void mostrarVidas(){
  lcd.setCursor(9,0);

  if(vidas>=1){
    lcd.write(byte(charCorazon)); 
  }else{
    lcd.write(byte(charCalavera));
  }
  lcd.print("  ");
  if(vidas>=2){
    lcd.write(byte(charCorazon)); 
  }else{
    lcd.write(byte(charCalavera));
  } 
  lcd.print("  ");
  if(vidas>=3){
    lcd.write(byte(charCorazon)); 
  }else{
    lcd.write(byte(charCalavera));
  } 
}

void limpiarLeds(){
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledVerde, LOW);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledAmarillo, LOW);
}

void prenderTodo(){
  digitalWrite(ledRojo, HIGH);
  digitalWrite(ledVerde, HIGH);
  digitalWrite(ledAzul, HIGH);
  digitalWrite(ledAmarillo, HIGH);
  delay(3000);
  digitalWrite(ledRojo, LOW);
  digitalWrite(ledVerde, LOW);
  digitalWrite(ledAzul, LOW);
  digitalWrite(ledAmarillo, LOW);
  
}

void jugarSecuencia(Paso secuencia[][4]){
  int pasoActual = 1;
  while(pasoActual <= nivelActual && vidas > 0){

    if(validarJugada(pasoActual, secuencia[pasoActual]) != 0){
      pasoActual++;
      racha++;
    }else{
      pasoActual = 1;
      derrota();
    }

    /*Serial.println(pasoActual);
    Serial.print("Gano: ");
    Serial.println(secuencia[pasoActual].colorLed == colorPulsado() && colorPulsado() != BLANCO);
    Serial.print("perdio: ");
    Serial.println(secuencia[pasoActual].colorLed != colorPulsado() && colorPulsado() != BLANCO);*/
  }
  if(pasoActual > nivelActual && nivelActual!=0){
    victoria();
  }
  if(vidas==0){
    derrota();
  }
}

int validarJugada(int nroPaso, Paso pasoSecuencia[]){
  switch (pasoSecuencia[0].tipoPaso){
    case ESTANDAR:
      return validarEstandar(nroPaso, pasoSecuencia);
      break;
    case TRAMPA:
      return validarTrampa(nroPaso, pasoSecuencia);
      break;
    case APRETON:
      return validarApreton(nroPaso, pasoSecuencia);
      break;
    case DOBLE:
      return validarDoble(nroPaso, pasoSecuencia);
      break;
  }
  return 0;
}

int validarEstandar(int nroPaso, Paso pasoSecuencia[]){
  while(true){
    if(colorValido(pasoSecuencia) == colorPulsado()){
      delay(50);
      if(colorValido(pasoSecuencia) == colorPulsado()){
        Color colorActual = colorPulsado();
        while(digitalRead(ledColor_(colorActual)) == LOW && colorPulsado() != BLANCO){
          digitalWrite(ledColor_(colorActual), HIGH);
          tone(buzzer, sonidoColor_(colorActual), 25);
          digitalWrite(ledColor_(colorActual), LOW);
        }
        noTone(buzzer);
        return nroPaso++;
      }
    }
    if(colorValido(pasoSecuencia) != colorPulsado() && colorPulsado() != BLANCO){
      delay(50);
      if(colorValido(pasoSecuencia) != colorPulsado() && colorPulsado() != BLANCO){
        return 0;
      }
    }
    delay(50);//delay que hay que poner para evitar stack overflow :/
  }
}

int validarTrampa(int nroPaso, Paso pasoSecuencia[]){
  while(true){
    if(colorValido(pasoSecuencia) == colorPulsado()){
      delay(50);
      if(colorValido(pasoSecuencia) == colorPulsado()){
        Color colorActual = colorPulsado();
        while(digitalRead(ledColor_(colorActual)) == LOW && colorPulsado() != BLANCO){
          digitalWrite(ledColor_(colorActual), HIGH);
          tone(buzzer, sonidoColor_(colorActual), 25);
          digitalWrite(ledColor_(colorActual), LOW);
        }
        noTone(buzzer);
        return nroPaso++;
      }
    }
    if(colorValido(pasoSecuencia) != colorPulsado() && colorPulsado() != BLANCO){
      delay(50);
      if(colorValido(pasoSecuencia) != colorPulsado() && colorPulsado() != BLANCO){
        return 0;
      }
    }
    delay(50);//delay que hay que poner para evitar stack overflow :/
  }
}

int validarApreton(int nroPaso, Paso pasoSecuencia[]) {
  while(true){

    //Paso pasoSecuencia[4] = {{APRETON,ROJO},{ESTANDAR,VERDE},{ESTANDAR,AMARILLO},{ESTANDAR,BLANCO}};

    Color colorMantenido = pasoSecuencia[0].colorLed;
    if (colorPulsado() != colorMantenido && colorPulsado() != BLANCO) {
        return 0; // Si no está presionando el color correcto, falla el paso
    }

    int longitudSecuencia = 0; 
    
    if(pasoSecuencia[2].colorLed == BLANCO){
      longitudSecuencia = 1;
      //Serial.print("color Cierre[2]: ");
      //Serial.println(pasoSecuencia[2].colorLed);
    } else if(pasoSecuencia[3].colorLed == BLANCO){
      longitudSecuencia = 2;
      //Serial.print("color Cierre[3]: ");
      //Serial.println(pasoSecuencia[3].colorLed);
    } else{
      //Serial.println("color Cierre[?]: NO HAY");
      longitudSecuencia = 3;
    }

    Paso secuenciaApreton[longitudSecuencia] = {};

    for(int i=0; i < longitudSecuencia; i++){
      secuenciaApreton[i] = pasoSecuencia[i+1];
    }

    int pasoValidado = 0;
    bool flag=false;

    Color color1 = BLANCO, color2 = BLANCO, color3 = BLANCO;

    while(digitalRead(entradaColor_(pasoSecuencia[0].colorLed)) == LOW && pasoValidado <= longitudSecuencia-1 && pasoValidado != -1){
      flag=true;
      digitalWrite(ledColor_(colorMantenido), HIGH);
      tone(buzzer, sonidoColor_(colorMantenido), 25);

      coloresMalos(colorMantenido, secuenciaApreton[pasoValidado].colorLed, color1, color2);
      if(digitalRead(entradaColor_(secuenciaApreton[pasoValidado].colorLed)) == LOW && digitalRead(entradaColor_(pasoSecuencia[0].colorLed)) == LOW){
        delay(50);
        while(digitalRead(entradaColor_(secuenciaApreton[pasoValidado].colorLed)) == LOW && digitalRead(entradaColor_(pasoSecuencia[0].colorLed)) == LOW){
          noTone(buzzer);
          digitalWrite(ledColor_(secuenciaApreton[pasoValidado].colorLed), HIGH);
          tone(buzzer, (sonidoColor_(colorMantenido) + sonidoColor_(secuenciaApreton[pasoValidado].colorLed)), 50);
          digitalWrite(ledColor_(secuenciaApreton[pasoValidado].colorLed), LOW);
        }
        tone(buzzer, sonidoColor_(colorMantenido), 25);
        pasoValidado++;

        //Serial.println("Se sumo un paso");
        //Serial.print("pasoValidado: ");
        //Serial.println(pasoValidado);
        //Serial.print("longitudSecuencia: ");
        //Serial.println(longitudSecuencia);
      }

      if(digitalRead(entradaColor_(color1)) == LOW || digitalRead(entradaColor_(color2)) == LOW){
        delay(50);
        if(digitalRead(entradaColor_(color1)) == LOW || digitalRead(entradaColor_(color2)) == LOW){
          pasoValidado = -1;
        }
      }

    }

    coloresMalosimos(colorMantenido, color1, color2, color3);

    while(digitalRead(entradaColor_(pasoSecuencia[0].colorLed)) == LOW && pasoValidado != -1){
      digitalWrite(ledColor_(colorMantenido), HIGH);
      tone(buzzer, sonidoColor_(colorMantenido), 25);
      if(digitalRead(entradaColor_(color1)) == LOW || digitalRead(entradaColor_(color2)) == LOW || digitalRead(entradaColor_(color3)) == LOW){
        delay(50);
        if(digitalRead(entradaColor_(color1)) == LOW || digitalRead(entradaColor_(color2)) == LOW || digitalRead(entradaColor_(color3)) == LOW){
          pasoValidado = 0;
        }
      }
    }

    digitalWrite(ledColor_(colorMantenido), LOW);
    noTone(buzzer);

    if(flag && pasoValidado == longitudSecuencia){
      return nroPaso++; 
    }else if(flag && pasoValidado != longitudSecuencia){
      return 0; 
    }

    delay(50);//delay que hay que poner para evitar stack overflow :/
  }
}

void coloresMalos(Color colorMantenido, Color colorBuenito, Color& color1, Color& color2){
  if(colorMantenido == ROJO){
    if(colorBuenito == VERDE){
      color1 = AZUL;
      color2 = AMARILLO;
    }
    if(colorBuenito == AZUL){
      color1 = VERDE;
      color2 = AMARILLO;
    }
    if(colorBuenito == AMARILLO){
      color1 = VERDE;
      color2 = AZUL;
    }
  }
  if(colorMantenido == VERDE){
    if(colorBuenito == ROJO){
      color1 = AZUL;
      color2 = AMARILLO;
    }
    if(colorBuenito == AZUL){
      color1 = ROJO;
      color2 = AMARILLO;
    }
    if(colorBuenito == AMARILLO){
      color1 = ROJO;
      color2 = AZUL;
    }
  }
  if(colorMantenido == AZUL){
    if(colorBuenito == ROJO){
      color1 = VERDE;
      color2 = AMARILLO;
    }
    if(colorBuenito == VERDE){
      color1 = ROJO;
      color2 = AMARILLO;
    }
    if(colorBuenito == AMARILLO){
      color1 = ROJO;
      color2 = VERDE;
    }
  }
  if(colorMantenido == AMARILLO){
    if(colorBuenito == ROJO){
      color1 = VERDE;
      color2 = AZUL;
    }
    if(colorBuenito == VERDE){
      color1 = ROJO;
      color2 = AZUL;
    }
    if(colorBuenito == AZUL){
      color1 = ROJO;
      color2 = VERDE;
    }
  }
}

void coloresMalosimos(Color colorMantenido, Color& color1, Color& color2, Color& color3){
  if(colorMantenido == ROJO){
    color1 = VERDE;
    color2 = AZUL;
    color3 = AMARILLO;
  }
  if(colorMantenido == VERDE){
    color1 = ROJO;
    color2 = AZUL;
    color3 = AMARILLO;
  }
  if(colorMantenido == AZUL){
    color1 = ROJO;
    color2 = VERDE;
    color3 = AMARILLO;
  }
  if(colorMantenido == AMARILLO){
    color1 = ROJO;
    color2 = VERDE;
    color3 = AZUL;
  }

}

int validarDoble(int nroPaso, Paso pasoSecuencia[]){
  while(true){
    bool primerColorPresionado = digitalRead(entradaColor_(pasoSecuencia[0].colorLed)) == LOW;
    bool segundoColorPresionado = digitalRead(entradaColor_(pasoSecuencia[1].colorLed)) == LOW;
    
    // Verifica si ambos colores correctos están pulsados simultáneamente
    if (primerColorPresionado && segundoColorPresionado) {
      delay(50); // Retardo para evitar rebotes
      // Verifica nuevamente que ambos siguen presionados
      while (digitalRead(entradaColor_(pasoSecuencia[0].colorLed)) == LOW && digitalRead(entradaColor_(pasoSecuencia[1].colorLed)) == LOW) {
        digitalWrite(ledColor_(pasoSecuencia[0].colorLed), HIGH);
        digitalWrite(ledColor_(pasoSecuencia[1].colorLed), HIGH);
        tone(buzzer, (sonidoColor_(pasoSecuencia[0].colorLed) + sonidoColor_(pasoSecuencia[1].colorLed)), 25);
        delay(50);
        digitalWrite(ledColor_(pasoSecuencia[0].colorLed), LOW);
        digitalWrite(ledColor_(pasoSecuencia[1].colorLed), LOW);
        }
        // Apaga los LEDs y reproduce el sonido de victoria
        noTone(buzzer);
        return nroPaso++;
    }
    
    // Condición de derrota: Si un botón incorrecto está presionado o solo uno de los dos correctos
    Color colorActual = colorPulsado();
    if ((colorActual != BLANCO && colorActual != pasoSecuencia[0].colorLed && colorActual != pasoSecuencia[1].colorLed) || 
        (primerColorPresionado != segundoColorPresionado)) {
      delay(50); // Retardo para para verificar si se apreta uno de los correctos o los dos a la vez (configDoble)
      // Confirma que el error persiste
      if ((colorActual != BLANCO && colorActual != pasoSecuencia[0].colorLed && colorActual != pasoSecuencia[1].colorLed) || 
          (digitalRead(entradaColor_(pasoSecuencia[0].colorLed)) != digitalRead(entradaColor_(pasoSecuencia[1].colorLed))) ) {
        return 0;
      }
    }
    delay(50);//delay que hay que poner para evitar stack overflow :/
  }
}


Color colorValido(Paso pasoSecuencia[]){
  if(pasoSecuencia[0].tipoPaso == ESTANDAR){
    return pasoSecuencia[0].colorLed;
  }
  if(pasoSecuencia[0].tipoPaso == TRAMPA){
    return pasoSecuencia[1].colorLed;
  }
  if(pasoSecuencia[0].tipoPaso == APRETON){
    return pasoSecuencia[0].colorLed;
  }
  return BLANCO;
}

void victoria(){
  reproducirSonidoVictoria();
}

void derrota(){
  if(vidas>1){
    reproducirSonidoGolpe();
    racha = 0;
  }

  if(vidas==0){
    reproducirSonidoDerrota();
    reproducirAnimacionDerrota();
    delay(2500);
    ingresarNombre();
  }
  
  if(vidas>0){
    vidas--;
    racha = 0;
    actualizarPantalla();
    if(vidas>0){
      realizarSecuencia(secuencia);
    }
  }else if(vidas == 0){
    racha = 0;
    nivelActual = 0;
    puntajeActual = 0;
    vidas=0;
  }
  
  //actualizarPantalla();
}

void reproducirSonidoDerrota() {
  int melodia[] = {261, 246, 233, 220};
  int compases[] = {200, 200, 200, 800};

  delay(350);

  for (int notaActual = 0; notaActual < 4; notaActual++) {
      int tempo = compases[notaActual];
      tone(buzzer, melodia[notaActual], tempo);
      delay(tempo);
      noTone(buzzer);
      delay(50);
  }

  delay(350);
}

void reproducirSonidoGolpe(){
  int melodia[] = {150, 150};
  int compases[] = {200, 200};

  delay(350);

  for (int notaActual = 0; notaActual < 2; notaActual++) {
      int tempo = compases[notaActual];
      tone(buzzer, melodia[notaActual], tempo);
      delay(tempo);
      noTone(buzzer);
      delay(50);
  }

  delay(350);
}

void reproducirSonidoVictoria() {
  int melodia[] = {261, 293, 329, 392};
  int compases[] = {100, 100, 100, 200};

  delay(350);

  for (int notaActual = 0; notaActual < 4; notaActual++) {
      int tempo = compases[notaActual];
      tone(buzzer, melodia[notaActual], tempo);
      delay(tempo);
      noTone(buzzer);
      delay(50);
  }

  delay(350);
}

void reproducirAnimacionDerrota(){

}

Color colorPulsado(){
  if(digitalRead(entradaRoja) == LOW){
    return ROJO;
  }else if(digitalRead(entradaVerde) == LOW){
    return VERDE;
  }else if(digitalRead(entradaAzul) == LOW){
    return AZUL;
  }else if(digitalRead(entradaAmarilla) == LOW){
    return AMARILLO;
  }else{
    return BLANCO;
  }
}

void activarPaso(Paso boton[]){
  switch(boton[0].tipoPaso){
    case ESTANDAR:
      activarPasoEstandar(boton[0].colorLed);
      break;
    case TRAMPA:
      activarPasoTrampa(boton);
      break;
    case APRETON:
      activarPasoApreton(boton);
      break;
    case DOBLE:
      activarPasoDoble(boton);
      break;
  }
}

void activarPasoEstandar(Color colorActual){
  actualizarVelocidad();
  digitalWrite(ledColor_(colorActual), HIGH);
  tone(buzzer, sonidoColor_(colorActual));
  delay(velocidadActual);
  digitalWrite(ledColor_(colorActual), LOW);
  noTone(buzzer);
  delay(velocidadActual);
}

void activarPasoTrampa(Paso pasoTrampa[]){
  actualizarVelocidad();

  digitalWrite(ledColor_(pasoTrampa[0].colorLed), HIGH);
  
  delay(velocidadActual);
  digitalWrite(ledColor_(pasoTrampa[0].colorLed), LOW);
  
  delay(velocidadActual);

  digitalWrite(ledColor_(pasoTrampa[1].colorLed), HIGH);
  tone(buzzer, sonidoColor_(pasoTrampa[1].colorLed));
  delay(velocidadActual);
  digitalWrite(ledColor_(pasoTrampa[1].colorLed), LOW);
  noTone(buzzer);
  delay(velocidadActual);
}

void activarPasoApreton(Paso pasoApreton[]){
  actualizarVelocidad();

  digitalWrite(ledColor_(pasoApreton[0].colorLed), HIGH);
  tone(buzzer, sonidoColor_(pasoApreton[0].colorLed));
  delay(velocidadActual);

  for(int i=1; i<=3; i++){
    if(pasoApreton[i].colorLed != BLANCO){

      digitalWrite(ledColor_(pasoApreton[i].colorLed), HIGH);
      tone(buzzer, (sonidoColor_(pasoApreton[0].colorLed)+sonidoColor_(pasoApreton[i].colorLed)));
      delay(velocidadActual);

      digitalWrite(ledColor_(pasoApreton[i].colorLed), LOW);
      tone(buzzer, sonidoColor_(pasoApreton[0].colorLed));
      delay(velocidadActual);
    }
  }

  digitalWrite(ledColor_(pasoApreton[0].colorLed), LOW);
  noTone(buzzer);
  delay(velocidadActual);
}
void activarPasoDoble(Paso pasoDoble[]){
  actualizarVelocidad();
  digitalWrite(ledColor_(pasoDoble[0].colorLed), HIGH);
  digitalWrite(ledColor_(pasoDoble[1].colorLed), HIGH);
  tone(buzzer, (sonidoColor_(pasoDoble[0].colorLed)+sonidoColor_(pasoDoble[1].colorLed)));
  delay(velocidadActual);
  
  digitalWrite(ledColor_(pasoDoble[0].colorLed), LOW);
  digitalWrite(ledColor_(pasoDoble[1].colorLed), LOW);
  noTone(buzzer);
  delay(velocidadActual);
}

void actualizarVelocidad(){
  if(nivelActual <= nivelRapido){
    velocidadActual = demoraMaxima/2-(nivelActual-1)*((demoraMaxima/2-demoraMinima/2)/(nivelRapido-1));
  }else{
    velocidadActual = demoraMinima/2; 
  }
}

int ledColor_(Color colorX){
  switch (colorX){
    case ROJO:
      return ledRojo;
    case VERDE:
      return ledVerde;
    case AZUL:
      return ledAzul;
    case AMARILLO:
      return ledAmarillo;
  }
  return 0;
}

int sonidoColor_(Color colorX){
  switch (colorX){
    case ROJO:
      return 220;
    case VERDE:
      return 330;
    case AZUL:
      return 440;
    case AMARILLO:
      return 550;
  }
  return 0;
}

int entradaColor_(Color colorX){
  switch (colorX){
    case ROJO:
      return entradaRoja;
    case VERDE:
      return entradaVerde;
    case AZUL:
      return entradaAzul;
    case AMARILLO:
      return entradaAmarilla;
  }
  return 0;
}

void sumarPasoAleatorio(Paso secuencia[][4]){
  int etapa = 1;
  if (nivelActual<=2){
    etapa = 1;
  }else if(nivelActual<=4){
    etapa = 2;
  }else if(nivelActual<=6){
    etapa = 3;
  }else if(nivelActual<=8){
    etapa = 4;
  }
  
  int condicion = random(0, etapa);//random(0,4)

  switch(modoActual){
    case NORMAL:
      condicion = 0;
      break;
    case QUANTUM:
      break;
    case FAST:
      condicion = 0;
      break;
    case TRAP:
      condicion = random(0, 2);
      break;
    case DOUBLE:
      condicion = 2;
      break;
    case GRIP:
      condicion = 3;
      break;
    case HARCORE:
      condicion = 0;
      break;
    case REVERSE:
      condicion = 0;
      break;
  }
  
  switch (condicion){ //(configPaso)
    case 0:
      return sumarPasoEstandar(secuencia);
    case 1:
      return sumarPasoTrampa(secuencia);
    case 2:
      return sumarPasoDoble(secuencia);
    case 3:
      return sumarPasoApreton(secuencia);
  }
}

void sumarPasoEstandar(Paso secuencia[][4]){
  Paso nuevoPaso = {ESTANDAR, generarColor()};
  secuencia[nivelActual][0] = nuevoPaso;
}

void sumarPasoTrampa(Paso secuencia[][4]){
  Paso nuevoPaso = {TRAMPA, generarColor()};
  secuencia[nivelActual][0] = nuevoPaso;
  
  nuevoPaso = {TRAMPA, generarColorDiferenteA_(secuencia[nivelActual][0].colorLed)};
  secuencia[nivelActual][1] = nuevoPaso;
}

void sumarPasoApreton(Paso secuencia[][4]){
  Paso nuevoPaso = {APRETON, generarColor()};
  secuencia[nivelActual][0] = nuevoPaso;

  Color mantenido = secuencia[nivelActual][0].colorLed;


  int cantPasos = random(1,3);// cambiar longitud de apreton
  for(int i=1; i<=cantPasos; i++){
    //Serial.println(i);
    if(i==1){
      nuevoPaso = {ESTANDAR, generarColorDiferenteA_(mantenido)};
      secuencia[nivelActual][i] = nuevoPaso;
    }
    if(i==2){
      nuevoPaso = {ESTANDAR, generarColorDiferenteADos(mantenido, secuencia[nivelActual][1].colorLed)};
      secuencia[nivelActual][i] = nuevoPaso;
    }
    if(i==3){
      nuevoPaso = {ESTANDAR, generarColorDiferenteATres(mantenido, secuencia[nivelActual][1].colorLed, secuencia[nivelActual][2].colorLed)};
      secuencia[nivelActual][i] = nuevoPaso;
    }
    
  }
  if (cantPasos !=2){ // cambiar longitud de apreton
    secuencia[nivelActual][cantPasos+1] = {ESTANDAR, BLANCO};
  }
  
}

void sumarPasoDoble(Paso secuencia[][4]){
  Paso nuevoPaso = {DOBLE, generarColor()};
  secuencia[nivelActual][0] = nuevoPaso;

  nuevoPaso = {DOBLE, generarColorDiferenteA_(secuencia[nivelActual][0].colorLed)};
  secuencia[nivelActual][1] = nuevoPaso;
}

void realizarSecuencia(Paso secuencia[][4]){
  for (int pasoActual=1; pasoActual<=nivelActual; pasoActual++){
    activarPaso(secuencia[pasoActual]);
  }
}

Color generarColorDiferenteATres(Color colorX, Color colorY, Color colorZ){
  bool rojo     = colorX == ROJO      || colorY == ROJO     || colorZ == ROJO;
  bool verde    = colorX == VERDE     || colorY == VERDE    || colorZ == VERDE;
  bool azul     = colorX == AZUL      || colorY == AZUL     || colorZ == AZUL;
  bool amarillo = colorX == AMARILLO  || colorY == AMARILLO || colorZ == AMARILLO;

  if(!rojo){
    return ROJO;
  }

  if(!verde){
    return VERDE;
  }

  if(!azul){
    return AZUL;
  }

  if(!amarillo){
    return AMARILLO;
  }
}

Color generarColorDiferenteADos(Color colorX, Color colorY){
  bool rojo     = colorX == ROJO      || colorY == ROJO;
  bool verde    = colorX == VERDE     || colorY == VERDE;
  bool azul     = colorX == AZUL      || colorY == AZUL;
  bool amarillo = colorX == AMARILLO  || colorY == AMARILLO;

  if(rojo && verde){
    switch(random(0,2)){
      case 0:
        return AZUL;
        break;
      case 1:
        return AMARILLO;
        break;
    }
  }

  if(rojo && azul){
    switch(random(0,2)){
      case 0:
        return VERDE;
        break;
      case 1:
        return AMARILLO;
        break;
    }
  }

  if(rojo && amarillo){
    switch(random(0,2)){
      case 0:
        return VERDE;
        break;
      case 1:
        return AZUL;
        break;
    }
  }

  if(verde && azul){
    switch(random(0,2)){
      case 0:
        return ROJO;
        break;
      case 1:
        return AMARILLO;
        break;
    }
  }

  if(verde && amarillo){
    switch(random(0,2)){
      case 0:
        return ROJO;
        break;
      case 1:
        return AZUL;
        break;
    }
  }

  if(azul && amarillo){
    switch(random(0,2)){
      case 0:
        return ROJO;
        break;
      case 1:
        return VERDE;
        break;
    }
  }
}

Color generarColorDiferenteA_(Color colorX){
  bool rojo = colorX == ROJO;
  bool verde = colorX == VERDE;
  bool azul = colorX == AZUL;
  bool amarillo = colorX == AMARILLO;

  if(rojo){
    switch(random(0,3)){
      case 0:
        return VERDE;
        break;
      case 1:
        return AZUL;
        break;
      case 2:
        return AMARILLO;
        break;
    }
  }

  if(verde){
    switch(random(0,3)){
      case 0:
        return ROJO;
        break;
      case 1:
        return AZUL;
        break;
      case 2:
        return AMARILLO;
        break;
    }
  }

  if(azul){
    switch(random(0,3)){
      case 0:
        return ROJO;
        break;
      case 1:
        return VERDE;
        break;
      case 2:
        return AMARILLO;
        break;
    }
  }

  if(amarillo){
    switch(random(0,3)){
      case 0:
        return ROJO;
        break;
      case 1:
        return VERDE;
        break;
      case 2:
        return AZUL;
        break;
    }
  }
}

Color generarColor(){
  switch (random(0,4)){
    case 0:
      return ROJO;
    case 1:
      return VERDE;
    case 2:
      return AZUL;
    case 3:
      return AMARILLO;
  }
  return BLANCO;
}

void debugNivelVelocidadSecuencia(){
  //Debug de nivel, velocidad y secuencia
  Serial.print("Nivel: ");
  Serial.print(nivelActual);
  Serial.print(" Velocidad: ");
  Serial.println(velocidadActual*2);
  
  Serial.print(" Secuencia: [");
  for (int i=1; i<=nivelActual; i++){
    if(secuencia[i][0].tipoPaso==ESTANDAR){
      Serial.print(secuencia[i][0].colorLed);
      if(i<nivelActual){
        Serial.print(", ");
      }        
    }
    if(secuencia[i][0].tipoPaso==TRAMPA){
      Serial.print(secuencia[i][1].colorLed);
      if(i<nivelActual){
        Serial.print(", ");
      }  
    }
    if(secuencia[i][0].tipoPaso==APRETON){
      Serial.print("[-");
      Serial.print(secuencia[i][0].colorLed);
      Serial.print(", ");
      for(int j=1; j<4; j++){
        if(secuencia[i][j].colorLed != BLANCO){
          Serial.print(secuencia[i][j].colorLed);
        }
        
        if(secuencia[i][j+1].colorLed != BLANCO && j<3){
          Serial.print(", ");
        }
        
      } 
      
      Serial.print("]");
      if(i<nivelActual){
        Serial.print(", ");
      }
    }if(secuencia[i][0].tipoPaso==DOBLE){
      Serial.print(secuencia[i][0].colorLed);
      Serial.print(" + ");
      Serial.print(secuencia[i][1].colorLed);
      if(i<nivelActual){
        Serial.print(", ");
      }  
    }
          
  } Serial.println("]");//Fin del debug
}

void debugClasificacion(Clasificacion ejemplo) {
  Serial.println("Clasificacion:");
  Serial.println(ejemplo.cantidadJugadores);
  
  for (int i = 0; i < ejemplo.cantidadJugadores; i++) {
    Serial.print("Jugador ");
    Serial.print(i + 1);  // Mostrar el puesto en la clasificación
    Serial.print(": ");
    Serial.print(ejemplo.lista[i].nombre);
    Serial.print(" - Puntaje: ");
    Serial.println(ejemplo.lista[i].puntaje);
  }
}
